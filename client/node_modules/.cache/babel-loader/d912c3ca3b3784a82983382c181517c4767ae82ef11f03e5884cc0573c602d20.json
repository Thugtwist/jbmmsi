{"ast":null,"code":"var _jsxFileName = \"C:\\\\jbmmsi\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocketContext = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocketContext must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocketContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const socketRef = useRef(null);\n  const isInitialized = useRef(false);\n  useEffect(() => {\n    // Prevent multiple initializations\n    if (isInitialized.current) {\n      return;\n    }\n    isInitialized.current = true;\n    console.log('🔌 Initializing WebSocket connection...');\n    socketRef.current = io('http://localhost:3001', {\n      transports: ['websocket', 'polling'],\n      timeout: 10000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    socketRef.current.on('connect', () => {\n      console.log('✅ Connected to WebSocket server:', socketRef.current.id);\n      setIsConnected(true);\n      addNotification('Connected to real-time updates', 'success');\n    });\n    socketRef.current.on('disconnect', reason => {\n      console.log('❌ Disconnected from server:', reason);\n      setIsConnected(false);\n    });\n    socketRef.current.on('connect_error', error => {\n      console.error('Connection error:', error);\n    });\n    socketRef.current.on('reconnect', attemptNumber => {\n      console.log(`🔄 Reconnected after ${attemptNumber} attempts`);\n      setIsConnected(true);\n    });\n    setSocket(socketRef.current);\n    return () => {\n      if (socketRef.current) {\n        console.log('🔌 Disconnecting socket...');\n        socketRef.current.disconnect();\n        socketRef.current = null;\n        isInitialized.current = false;\n      }\n    };\n  }, []);\n  const addNotification = (message, type = 'info') => {\n    const newNotification = {\n      id: Date.now(),\n      message,\n      type,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\n    }, 5000);\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n  const value = {\n    socket: socketRef.current,\n    isConnected,\n    notifications,\n    addNotification,\n    removeNotification\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"tS/LdMg1UMGXQ0ZAJIGT3uwIvQc=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","io","jsxDEV","_jsxDEV","SocketContext","useSocketContext","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","notifications","setNotifications","socketRef","isInitialized","current","console","log","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","id","addNotification","reason","error","attemptNumber","disconnect","message","type","newNotification","Date","now","timestamp","prev","setTimeout","filter","notif","removeNotification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/jbmmsi/client/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocketContext = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocketContext must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const socketRef = useRef(null);\r\n  const isInitialized = useRef(false);\r\n\r\n  useEffect(() => {\r\n    // Prevent multiple initializations\r\n    if (isInitialized.current) {\r\n      return;\r\n    }\r\n    \r\n    isInitialized.current = true;\r\n    console.log('🔌 Initializing WebSocket connection...');\r\n\r\n    socketRef.current = io('http://localhost:3001', {\r\n      transports: ['websocket', 'polling'],\r\n      timeout: 10000,\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n\r\n    socketRef.current.on('connect', () => {\r\n      console.log('✅ Connected to WebSocket server:', socketRef.current.id);\r\n      setIsConnected(true);\r\n      addNotification('Connected to real-time updates', 'success');\r\n    });\r\n\r\n    socketRef.current.on('disconnect', (reason) => {\r\n      console.log('❌ Disconnected from server:', reason);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    socketRef.current.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n    });\r\n\r\n    socketRef.current.on('reconnect', (attemptNumber) => {\r\n      console.log(`🔄 Reconnected after ${attemptNumber} attempts`);\r\n      setIsConnected(true);\r\n    });\r\n\r\n    setSocket(socketRef.current);\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        console.log('🔌 Disconnecting socket...');\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n        isInitialized.current = false;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const addNotification = (message, type = 'info') => {\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      message,\r\n      type,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setNotifications(prev => [...prev, newNotification]);\r\n    \r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\r\n    }, 5000);\r\n  };\r\n\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\r\n  };\r\n\r\n  const value = {\r\n    socket: socketRef.current,\r\n    isConnected,\r\n    notifications,\r\n    addNotification,\r\n    removeNotification\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}