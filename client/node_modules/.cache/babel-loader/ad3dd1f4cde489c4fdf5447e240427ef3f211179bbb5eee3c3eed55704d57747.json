{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useApi } from './useApi.js';\nimport { useSocket } from '../context/SocketContext.js';\nexport const useAnnouncements = () => {\n  _s();\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useApi('http://localhost:3001/api/announcements');\n  const {\n    on,\n    off,\n    isConnected\n  } = useSocket();\n  const [announcements, setAnnouncements] = useState([]);\n\n  // Set data when API response comes\n  useEffect(() => {\n    if (data) {\n      setAnnouncements(data);\n    }\n  }, [data]);\n\n  // Real-time event listeners\n  useEffect(() => {\n    if (!isConnected) return;\n    console.log('游댋 Setting up announcement listeners...');\n    const handleNew = newAnnouncement => {\n      console.log('游닉 New announcement:', newAnnouncement);\n      setAnnouncements(prev => [newAnnouncement, ...prev]);\n    };\n    const handleUpdate = updatedAnnouncement => {\n      console.log('游닉 Updated announcement:', updatedAnnouncement);\n      setAnnouncements(prev => prev.map(item => item._id === updatedAnnouncement._id ? updatedAnnouncement : item));\n    };\n    const handleDelete = deletedData => {\n      console.log('游닉 Deleted announcement:', deletedData.id);\n      setAnnouncements(prev => prev.filter(item => item._id !== deletedData.id));\n    };\n\n    // Register listeners\n    on('announcement_created', handleNew);\n    on('announcement_updated', handleUpdate);\n    on('announcement_deleted', handleDelete);\n\n    // Cleanup\n    return () => {\n      off('announcement_created', handleNew);\n      off('announcement_updated', handleUpdate);\n      off('announcement_deleted', handleDelete);\n    };\n  }, [on, off, isConnected]);\n  return {\n    announcements,\n    loading,\n    error,\n    refetch,\n    isConnected\n  };\n};\n_s(useAnnouncements, \"qKoMQsXBRLjJ269NiR8Lgb8cI4E=\", false, function () {\n  return [useApi, useSocket];\n});","map":{"version":3,"names":["useState","useEffect","useApi","useSocket","useAnnouncements","_s","data","loading","error","refetch","on","off","isConnected","announcements","setAnnouncements","console","log","handleNew","newAnnouncement","prev","handleUpdate","updatedAnnouncement","map","item","_id","handleDelete","deletedData","id","filter"],"sources":["C:/jbmmsi/client/src/hooks/useAnnouncements.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useApi } from './useApi.js';\r\nimport { useSocket } from '../context/SocketContext.js';\r\n\r\nexport const useAnnouncements = () => {\r\n  const { data, loading, error, refetch } = useApi('http://localhost:3001/api/announcements');\r\n  const { on, off, isConnected } = useSocket();\r\n  const [announcements, setAnnouncements] = useState([]);\r\n\r\n  // Set data when API response comes\r\n  useEffect(() => {\r\n    if (data) {\r\n      setAnnouncements(data);\r\n    }\r\n  }, [data]);\r\n\r\n  // Real-time event listeners\r\n  useEffect(() => {\r\n    if (!isConnected) return;\r\n\r\n    console.log('游댋 Setting up announcement listeners...');\r\n\r\n    const handleNew = (newAnnouncement) => {\r\n      console.log('游닉 New announcement:', newAnnouncement);\r\n      setAnnouncements(prev => [newAnnouncement, ...prev]);\r\n    };\r\n\r\n    const handleUpdate = (updatedAnnouncement) => {\r\n      console.log('游닉 Updated announcement:', updatedAnnouncement);\r\n      setAnnouncements(prev => \r\n        prev.map(item => \r\n          item._id === updatedAnnouncement._id ? updatedAnnouncement : item\r\n        )\r\n      );\r\n    };\r\n\r\n    const handleDelete = (deletedData) => {\r\n      console.log('游닉 Deleted announcement:', deletedData.id);\r\n      setAnnouncements(prev => \r\n        prev.filter(item => item._id !== deletedData.id)\r\n      );\r\n    };\r\n\r\n    // Register listeners\r\n    on('announcement_created', handleNew);\r\n    on('announcement_updated', handleUpdate);\r\n    on('announcement_deleted', handleDelete);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      off('announcement_created', handleNew);\r\n      off('announcement_updated', handleUpdate);\r\n      off('announcement_deleted', handleDelete);\r\n    };\r\n  }, [on, off, isConnected]);\r\n\r\n  return {\r\n    announcements,\r\n    loading,\r\n    error,\r\n    refetch,\r\n    isConnected\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGP,MAAM,CAAC,yCAAyC,CAAC;EAC3F,MAAM;IAAEQ,EAAE;IAAEC,GAAG;IAAEC;EAAY,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC5C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIK,IAAI,EAAE;MACRQ,gBAAgB,CAACR,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEV;EACAL,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,WAAW,EAAE;IAElBG,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IAEtD,MAAMC,SAAS,GAAIC,eAAe,IAAK;MACrCH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEE,eAAe,CAAC;MACpDJ,gBAAgB,CAACK,IAAI,IAAI,CAACD,eAAe,EAAE,GAAGC,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,MAAMC,YAAY,GAAIC,mBAAmB,IAAK;MAC5CN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEK,mBAAmB,CAAC;MAC5DP,gBAAgB,CAACK,IAAI,IACnBA,IAAI,CAACG,GAAG,CAACC,IAAI,IACXA,IAAI,CAACC,GAAG,KAAKH,mBAAmB,CAACG,GAAG,GAAGH,mBAAmB,GAAGE,IAC/D,CACF,CAAC;IACH,CAAC;IAED,MAAME,YAAY,GAAIC,WAAW,IAAK;MACpCX,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,WAAW,CAACC,EAAE,CAAC;MACvDb,gBAAgB,CAACK,IAAI,IACnBA,IAAI,CAACS,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKE,WAAW,CAACC,EAAE,CACjD,CAAC;IACH,CAAC;;IAED;IACAjB,EAAE,CAAC,sBAAsB,EAAEO,SAAS,CAAC;IACrCP,EAAE,CAAC,sBAAsB,EAAEU,YAAY,CAAC;IACxCV,EAAE,CAAC,sBAAsB,EAAEe,YAAY,CAAC;;IAExC;IACA,OAAO,MAAM;MACXd,GAAG,CAAC,sBAAsB,EAAEM,SAAS,CAAC;MACtCN,GAAG,CAAC,sBAAsB,EAAES,YAAY,CAAC;MACzCT,GAAG,CAAC,sBAAsB,EAAEc,YAAY,CAAC;IAC3C,CAAC;EACH,CAAC,EAAE,CAACf,EAAE,EAAEC,GAAG,EAAEC,WAAW,CAAC,CAAC;EAE1B,OAAO;IACLC,aAAa;IACbN,OAAO;IACPC,KAAK;IACLC,OAAO;IACPG;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CA3DWD,gBAAgB;EAAA,QACeF,MAAM,EACfC,SAAS;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}