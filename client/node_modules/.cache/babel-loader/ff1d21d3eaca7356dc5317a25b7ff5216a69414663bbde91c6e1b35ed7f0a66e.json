{"ast":null,"code":"var _jsxFileName = \"C:\\\\jbmmsi\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocketContext = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocketContext must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocketContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [eventListeners, setEventListeners] = useState(new Map());\n\n  // Function to add event listeners that will be re-established on reconnection\n  const addEventListener = useCallback((event, callback) => {\n    if (socket) {\n      console.log(`🔌 Adding listener for event: ${event}`);\n      socket.on(event, callback);\n\n      // Store the listener for reconnection\n      setEventListeners(prev => {\n        const newListeners = new Map(prev);\n        const existingCallbacks = newListeners.get(event) || [];\n        newListeners.set(event, [...existingCallbacks, callback]);\n        return newListeners;\n      });\n    }\n  }, [socket]);\n\n  // Function to remove event listeners\n  const removeEventListener = useCallback((event, callback) => {\n    if (socket) {\n      socket.off(event, callback);\n      setEventListeners(prev => {\n        const newListeners = new Map(prev);\n        const existingCallbacks = newListeners.get(event) || [];\n        const filteredCallbacks = existingCallbacks.filter(cb => cb !== callback);\n        if (filteredCallbacks.length === 0) {\n          newListeners.delete(event);\n        } else {\n          newListeners.set(event, filteredCallbacks);\n        }\n        return newListeners;\n      });\n    }\n  }, [socket]);\n\n  // Re-establish all event listeners on reconnection\n  const reestablishEventListeners = useCallback(() => {\n    if (socket) {\n      console.log('🔌 Re-establishing event listeners...');\n      eventListeners.forEach((callbacks, event) => {\n        callbacks.forEach(callback => {\n          socket.on(event, callback);\n        });\n      });\n    }\n  }, [socket, eventListeners]);\n  useEffect(() => {\n    console.log('🔌 Initializing WebSocket connection...');\n    const socketIo = io('http://localhost:3001', {\n      transports: ['websocket', 'polling'],\n      timeout: 10000,\n      reconnection: true,\n      reconnectionAttempts: Infinity,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000\n    });\n    const handleConnect = () => {\n      console.log('✅ Connected to WebSocket server:', socketIo.id);\n      setIsConnected(true);\n      addNotification('Connected to real-time updates', 'success');\n\n      // Re-establish all event listeners after connection\n      setTimeout(() => {\n        reestablishEventListeners();\n      }, 100);\n    };\n    const handleDisconnect = reason => {\n      console.log('❌ Disconnected from server:', reason);\n      setIsConnected(false);\n      if (reason === 'io server disconnect') {\n        // Server forced disconnect, need to manually reconnect\n        socketIo.connect();\n      }\n    };\n    const handleConnectError = error => {\n      console.error('Connection error:', error);\n      addNotification('Connection lost - updates may not be real-time', 'warning');\n    };\n    const handleReconnect = attemptNumber => {\n      console.log(`🔄 Reconnected to server after ${attemptNumber} attempts`);\n      addNotification('Reconnected - real-time updates restored', 'success');\n      setIsConnected(true);\n    };\n    const handleReconnectAttempt = attemptNumber => {\n      console.log(`🔄 Reconnection attempt ${attemptNumber}`);\n    };\n    const handleReconnectError = error => {\n      console.error('Reconnection error:', error);\n    };\n    const handleReconnectFailed = () => {\n      console.error('❌ Failed to reconnect to server');\n      addNotification('Failed to reconnect - please refresh the page', 'error');\n    };\n\n    // Set up event listeners\n    socketIo.on('connect', handleConnect);\n    socketIo.on('disconnect', handleDisconnect);\n    socketIo.on('connect_error', handleConnectError);\n    socketIo.on('reconnect', handleReconnect);\n    socketIo.on('reconnect_attempt', handleReconnectAttempt);\n    socketIo.on('reconnect_error', handleReconnectError);\n    socketIo.on('reconnect_failed', handleReconnectFailed);\n    setSocket(socketIo);\n    return () => {\n      console.log('🔌 Cleaning up WebSocket connection...');\n      socketIo.off('connect', handleConnect);\n      socketIo.off('disconnect', handleDisconnect);\n      socketIo.off('connect_error', handleConnectError);\n      socketIo.off('reconnect', handleReconnect);\n      socketIo.off('reconnect_attempt', handleReconnectAttempt);\n      socketIo.off('reconnect_error', handleReconnectError);\n      socketIo.off('reconnect_failed', handleReconnectFailed);\n      socketIo.disconnect();\n    };\n  }, [reestablishEventListeners]);\n  const addNotification = (message, type = 'info') => {\n    const newNotification = {\n      id: Date.now(),\n      message,\n      type,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\n    }, 5000);\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n  const value = {\n    socket,\n    isConnected,\n    notifications,\n    addNotification,\n    removeNotification,\n    addEventListener,\n    removeEventListener\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"LsU13WweU9RhFNBSFgJlAofJHUI=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","io","jsxDEV","_jsxDEV","SocketContext","useSocketContext","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","notifications","setNotifications","eventListeners","setEventListeners","Map","addEventListener","event","callback","console","log","on","prev","newListeners","existingCallbacks","get","set","removeEventListener","off","filteredCallbacks","filter","cb","length","delete","reestablishEventListeners","forEach","callbacks","socketIo","transports","timeout","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","handleConnect","id","addNotification","setTimeout","handleDisconnect","reason","connect","handleConnectError","error","handleReconnect","attemptNumber","handleReconnectAttempt","handleReconnectError","handleReconnectFailed","disconnect","message","type","newNotification","Date","now","timestamp","notif","removeNotification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/jbmmsi/client/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocketContext = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocketContext must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [eventListeners, setEventListeners] = useState(new Map());\r\n\r\n  // Function to add event listeners that will be re-established on reconnection\r\n  const addEventListener = useCallback((event, callback) => {\r\n    if (socket) {\r\n      console.log(`🔌 Adding listener for event: ${event}`);\r\n      socket.on(event, callback);\r\n      \r\n      // Store the listener for reconnection\r\n      setEventListeners(prev => {\r\n        const newListeners = new Map(prev);\r\n        const existingCallbacks = newListeners.get(event) || [];\r\n        newListeners.set(event, [...existingCallbacks, callback]);\r\n        return newListeners;\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  // Function to remove event listeners\r\n  const removeEventListener = useCallback((event, callback) => {\r\n    if (socket) {\r\n      socket.off(event, callback);\r\n      \r\n      setEventListeners(prev => {\r\n        const newListeners = new Map(prev);\r\n        const existingCallbacks = newListeners.get(event) || [];\r\n        const filteredCallbacks = existingCallbacks.filter(cb => cb !== callback);\r\n        \r\n        if (filteredCallbacks.length === 0) {\r\n          newListeners.delete(event);\r\n        } else {\r\n          newListeners.set(event, filteredCallbacks);\r\n        }\r\n        \r\n        return newListeners;\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  // Re-establish all event listeners on reconnection\r\n  const reestablishEventListeners = useCallback(() => {\r\n    if (socket) {\r\n      console.log('🔌 Re-establishing event listeners...');\r\n      eventListeners.forEach((callbacks, event) => {\r\n        callbacks.forEach(callback => {\r\n          socket.on(event, callback);\r\n        });\r\n      });\r\n    }\r\n  }, [socket, eventListeners]);\r\n\r\n  useEffect(() => {\r\n    console.log('🔌 Initializing WebSocket connection...');\r\n    const socketIo = io('http://localhost:3001', {\r\n      transports: ['websocket', 'polling'],\r\n      timeout: 10000,\r\n      reconnection: true,\r\n      reconnectionAttempts: Infinity,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n    });\r\n\r\n    const handleConnect = () => {\r\n      console.log('✅ Connected to WebSocket server:', socketIo.id);\r\n      setIsConnected(true);\r\n      addNotification('Connected to real-time updates', 'success');\r\n      \r\n      // Re-establish all event listeners after connection\r\n      setTimeout(() => {\r\n        reestablishEventListeners();\r\n      }, 100);\r\n    };\r\n\r\n    const handleDisconnect = (reason) => {\r\n      console.log('❌ Disconnected from server:', reason);\r\n      setIsConnected(false);\r\n      \r\n      if (reason === 'io server disconnect') {\r\n        // Server forced disconnect, need to manually reconnect\r\n        socketIo.connect();\r\n      }\r\n    };\r\n\r\n    const handleConnectError = (error) => {\r\n      console.error('Connection error:', error);\r\n      addNotification('Connection lost - updates may not be real-time', 'warning');\r\n    };\r\n\r\n    const handleReconnect = (attemptNumber) => {\r\n      console.log(`🔄 Reconnected to server after ${attemptNumber} attempts`);\r\n      addNotification('Reconnected - real-time updates restored', 'success');\r\n      setIsConnected(true);\r\n    };\r\n\r\n    const handleReconnectAttempt = (attemptNumber) => {\r\n      console.log(`🔄 Reconnection attempt ${attemptNumber}`);\r\n    };\r\n\r\n    const handleReconnectError = (error) => {\r\n      console.error('Reconnection error:', error);\r\n    };\r\n\r\n    const handleReconnectFailed = () => {\r\n      console.error('❌ Failed to reconnect to server');\r\n      addNotification('Failed to reconnect - please refresh the page', 'error');\r\n    };\r\n\r\n    // Set up event listeners\r\n    socketIo.on('connect', handleConnect);\r\n    socketIo.on('disconnect', handleDisconnect);\r\n    socketIo.on('connect_error', handleConnectError);\r\n    socketIo.on('reconnect', handleReconnect);\r\n    socketIo.on('reconnect_attempt', handleReconnectAttempt);\r\n    socketIo.on('reconnect_error', handleReconnectError);\r\n    socketIo.on('reconnect_failed', handleReconnectFailed);\r\n\r\n    setSocket(socketIo);\r\n\r\n    return () => {\r\n      console.log('🔌 Cleaning up WebSocket connection...');\r\n      socketIo.off('connect', handleConnect);\r\n      socketIo.off('disconnect', handleDisconnect);\r\n      socketIo.off('connect_error', handleConnectError);\r\n      socketIo.off('reconnect', handleReconnect);\r\n      socketIo.off('reconnect_attempt', handleReconnectAttempt);\r\n      socketIo.off('reconnect_error', handleReconnectError);\r\n      socketIo.off('reconnect_failed', handleReconnectFailed);\r\n      socketIo.disconnect();\r\n    };\r\n  }, [reestablishEventListeners]);\r\n\r\n  const addNotification = (message, type = 'info') => {\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      message,\r\n      type,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setNotifications(prev => [...prev, newNotification]);\r\n    \r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\r\n    }, 5000);\r\n  };\r\n\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    notifications,\r\n    addNotification,\r\n    removeNotification,\r\n    addEventListener,\r\n    removeEventListener\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}