{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nexport const useSocket = () => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const socketRef = useRef(null);\n  useEffect(() => {\n    // Connect to Socket.IO server\n    console.log('🔌 Connecting to WebSocket server...');\n    socketRef.current = io('http://localhost:3001', {\n      transports: ['websocket', 'polling']\n    });\n    socketRef.current.on('connect', () => {\n      console.log('✅ Connected to real-time server');\n      setIsConnected(true);\n      addNotification('Connected to real-time updates', 'success');\n    });\n    socketRef.current.on('disconnect', () => {\n      console.log('❌ Disconnected from server');\n      setIsConnected(false);\n    });\n    socketRef.current.on('connected', data => {\n      console.log('✅ Server connection confirmed:', data.message);\n    });\n\n    // Connection error handling\n    socketRef.current.on('connect_error', error => {\n      console.error('Connection error:', error);\n      addNotification('Connection lost - updates may not be real-time', 'warning');\n    });\n    socketRef.current.on('reconnect', () => {\n      console.log('🔄 Reconnected to server');\n      addNotification('Reconnected - real-time updates restored', 'success');\n      setIsConnected(true);\n    });\n    setSocket(socketRef.current);\n    return () => {\n      if (socketRef.current) {\n        console.log('🔌 Disconnecting socket...');\n        socketRef.current.disconnect();\n      }\n    };\n  }, []);\n  const addNotification = (message, type = 'info') => {\n    const newNotification = {\n      id: Date.now(),\n      message,\n      type,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\n    }, 5000);\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n  return {\n    socket,\n    notifications,\n    removeNotification,\n    isConnected,\n    addNotification\n  };\n};\n_s(useSocket, \"dMMVeT4/5D4hC7GOA1B9fcbpLFU=\");","map":{"version":3,"names":["useEffect","useState","useRef","io","useSocket","_s","socket","setSocket","notifications","setNotifications","isConnected","setIsConnected","socketRef","console","log","current","transports","on","addNotification","data","message","error","disconnect","type","newNotification","id","Date","now","timestamp","prev","setTimeout","filter","notif","removeNotification"],"sources":["C:/jbmmsi/client/src/hooks/useSocket.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const useSocket = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Connect to Socket.IO server\r\n    console.log('🔌 Connecting to WebSocket server...');\r\n    socketRef.current = io('http://localhost:3001', {\r\n      transports: ['websocket', 'polling']\r\n    });\r\n\r\n    socketRef.current.on('connect', () => {\r\n      console.log('✅ Connected to real-time server');\r\n      setIsConnected(true);\r\n      addNotification('Connected to real-time updates', 'success');\r\n    });\r\n\r\n    socketRef.current.on('disconnect', () => {\r\n      console.log('❌ Disconnected from server');\r\n      setIsConnected(false);\r\n    });\r\n\r\n    socketRef.current.on('connected', (data) => {\r\n      console.log('✅ Server connection confirmed:', data.message);\r\n    });\r\n\r\n    // Connection error handling\r\n    socketRef.current.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      addNotification('Connection lost - updates may not be real-time', 'warning');\r\n    });\r\n\r\n    socketRef.current.on('reconnect', () => {\r\n      console.log('🔄 Reconnected to server');\r\n      addNotification('Reconnected - real-time updates restored', 'success');\r\n      setIsConnected(true);\r\n    });\r\n\r\n    setSocket(socketRef.current);\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        console.log('🔌 Disconnecting socket...');\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const addNotification = (message, type = 'info') => {\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      message,\r\n      type,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setNotifications(prev => [...prev, newNotification]);\r\n    \r\n    // Auto remove after 5 seconds\r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\r\n    }, 5000);\r\n  };\r\n\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\r\n  };\r\n\r\n  return {\r\n    socket,\r\n    notifications,\r\n    removeNotification,\r\n    isConnected,\r\n    addNotification\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}