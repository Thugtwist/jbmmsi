{"ast":null,"code":"var _jsxFileName = \"C:\\\\jbmmsi\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocketContext = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocketContext must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocketContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    // Create a single socket connection for the entire app\n    const socketIo = io('http://localhost:3001', {\n      transports: ['websocket', 'polling'],\n      timeout: 10000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    socketIo.on('connect', () => {\n      console.log('✅ Connected to WebSocket server:', socketIo.id);\n      setIsConnected(true);\n      addNotification('Connected to real-time updates', 'success');\n    });\n    socketIo.on('disconnect', reason => {\n      console.log('❌ Disconnected from server:', reason);\n      setIsConnected(false);\n    });\n    socketIo.on('connected', data => {\n      console.log('✅ Server connection confirmed:', data.message);\n    });\n    socketIo.on('connect_error', error => {\n      console.error('Connection error:', error);\n      addNotification('Connection lost - updates may not be real-time', 'warning');\n    });\n    socketIo.on('reconnect', attemptNumber => {\n      console.log(`🔄 Reconnected to server after ${attemptNumber} attempts`);\n      addNotification('Reconnected - real-time updates restored', 'success');\n      setIsConnected(true);\n    });\n    socketIo.on('reconnect_attempt', attemptNumber => {\n      console.log(`🔄 Attempting to reconnect (${attemptNumber})...`);\n    });\n    socketIo.on('reconnect_error', error => {\n      console.error('Reconnection error:', error);\n    });\n    socketIo.on('reconnect_failed', () => {\n      console.error('❌ Failed to reconnect to server');\n      addNotification('Failed to reconnect - please refresh the page', 'error');\n    });\n    setSocket(socketIo);\n    return () => {\n      console.log('🔌 Disconnecting socket...');\n      socketIo.disconnect();\n    };\n  }, []);\n  const addNotification = (message, type = 'info') => {\n    const newNotification = {\n      id: Date.now(),\n      message,\n      type,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\n    }, 5000);\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n  const value = {\n    socket,\n    isConnected,\n    notifications,\n    addNotification,\n    removeNotification\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"BmlehybYP4nDBd+axZW/f1AIJY8=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","useSocketContext","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","notifications","setNotifications","socketIo","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","id","addNotification","reason","data","message","error","attemptNumber","disconnect","type","newNotification","Date","now","timestamp","prev","setTimeout","filter","notif","removeNotification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/jbmmsi/client/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocketContext = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocketContext must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Create a single socket connection for the entire app\r\n    const socketIo = io('http://localhost:3001', {\r\n      transports: ['websocket', 'polling'],\r\n      timeout: 10000,\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n\r\n    socketIo.on('connect', () => {\r\n      console.log('✅ Connected to WebSocket server:', socketIo.id);\r\n      setIsConnected(true);\r\n      addNotification('Connected to real-time updates', 'success');\r\n    });\r\n\r\n    socketIo.on('disconnect', (reason) => {\r\n      console.log('❌ Disconnected from server:', reason);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    socketIo.on('connected', (data) => {\r\n      console.log('✅ Server connection confirmed:', data.message);\r\n    });\r\n\r\n    socketIo.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      addNotification('Connection lost - updates may not be real-time', 'warning');\r\n    });\r\n\r\n    socketIo.on('reconnect', (attemptNumber) => {\r\n      console.log(`🔄 Reconnected to server after ${attemptNumber} attempts`);\r\n      addNotification('Reconnected - real-time updates restored', 'success');\r\n      setIsConnected(true);\r\n    });\r\n\r\n    socketIo.on('reconnect_attempt', (attemptNumber) => {\r\n      console.log(`🔄 Attempting to reconnect (${attemptNumber})...`);\r\n    });\r\n\r\n    socketIo.on('reconnect_error', (error) => {\r\n      console.error('Reconnection error:', error);\r\n    });\r\n\r\n    socketIo.on('reconnect_failed', () => {\r\n      console.error('❌ Failed to reconnect to server');\r\n      addNotification('Failed to reconnect - please refresh the page', 'error');\r\n    });\r\n\r\n    setSocket(socketIo);\r\n\r\n    return () => {\r\n      console.log('🔌 Disconnecting socket...');\r\n      socketIo.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const addNotification = (message, type = 'info') => {\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      message,\r\n      type,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setNotifications(prev => [...prev, newNotification]);\r\n    \r\n    // Auto remove after 5 seconds\r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(notif => notif.id !== newNotification.id));\r\n    }, 5000);\r\n  };\r\n\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    notifications,\r\n    addNotification,\r\n    removeNotification\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}