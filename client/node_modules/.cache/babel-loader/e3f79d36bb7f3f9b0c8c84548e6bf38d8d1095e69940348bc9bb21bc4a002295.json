{"ast":null,"code":"var _jsxFileName = \"C:\\\\jbmmsi\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const socketRef = useRef(null);\n  const eventListenersRef = useRef(new Map());\n\n  // Initialize socket connection\n  useEffect(() => {\n    console.log('🔌 Initializing WebSocket connection...');\n    socketRef.current = io('http://localhost:3001', {\n      transports: ['websocket', 'polling'],\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Connection events\n    socketRef.current.on('connect', () => {\n      console.log('✅ Connected to server:', socketRef.current.id);\n      setIsConnected(true);\n      addNotification('Connected to real-time updates', 'success');\n    });\n    socketRef.current.on('disconnect', () => {\n      console.log('❌ Disconnected from server');\n      setIsConnected(false);\n    });\n    socketRef.current.on('connect_error', error => {\n      console.error('Connection error:', error);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      console.log('🔌 Disconnecting socket...');\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, []);\n\n  // Add notification\n  const addNotification = (message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      message,\n      type\n    }]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(notif => notif.id !== id));\n    }, 5000);\n  };\n\n  // Remove notification\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n\n  // Emit event\n  const emit = (event, data) => {\n    if (socketRef.current) {\n      socketRef.current.emit(event, data);\n    }\n  };\n\n  // Listen to event\n  const on = (event, callback) => {\n    if (socketRef.current) {\n      socketRef.current.on(event, callback);\n\n      // Store listener for cleanup\n      if (!eventListenersRef.current.has(event)) {\n        eventListenersRef.current.set(event, []);\n      }\n      eventListenersRef.current.get(event).push(callback);\n    }\n  };\n\n  // Remove listener\n  const off = (event, callback) => {\n    if (socketRef.current) {\n      socketRef.current.off(event, callback);\n    }\n  };\n  const value = {\n    isConnected,\n    notifications,\n    addNotification,\n    removeNotification,\n    emit,\n    on,\n    off\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"3lBidsV5LGYA/Q3n6n/IOWpnLzA=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","io","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","isConnected","setIsConnected","notifications","setNotifications","socketRef","eventListenersRef","Map","console","log","current","transports","reconnection","reconnectionAttempts","reconnectionDelay","on","id","addNotification","error","disconnect","message","type","Date","now","prev","setTimeout","filter","notif","removeNotification","emit","event","data","callback","has","set","get","push","off","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/jbmmsi/client/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = createContext(null);\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const socketRef = useRef(null);\r\n  const eventListenersRef = useRef(new Map());\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    console.log('🔌 Initializing WebSocket connection...');\r\n    \r\n    socketRef.current = io('http://localhost:3001', {\r\n      transports: ['websocket', 'polling'],\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n\r\n    // Connection events\r\n    socketRef.current.on('connect', () => {\r\n      console.log('✅ Connected to server:', socketRef.current.id);\r\n      setIsConnected(true);\r\n      addNotification('Connected to real-time updates', 'success');\r\n    });\r\n\r\n    socketRef.current.on('disconnect', () => {\r\n      console.log('❌ Disconnected from server');\r\n      setIsConnected(false);\r\n    });\r\n\r\n    socketRef.current.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n    });\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      console.log('🔌 Disconnecting socket...');\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n        socketRef.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Add notification\r\n  const addNotification = (message, type = 'info') => {\r\n    const id = Date.now();\r\n    setNotifications(prev => [...prev, { id, message, type }]);\r\n    \r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(notif => notif.id !== id));\r\n    }, 5000);\r\n  };\r\n\r\n  // Remove notification\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\r\n  };\r\n\r\n  // Emit event\r\n  const emit = (event, data) => {\r\n    if (socketRef.current) {\r\n      socketRef.current.emit(event, data);\r\n    }\r\n  };\r\n\r\n  // Listen to event\r\n  const on = (event, callback) => {\r\n    if (socketRef.current) {\r\n      socketRef.current.on(event, callback);\r\n      \r\n      // Store listener for cleanup\r\n      if (!eventListenersRef.current.has(event)) {\r\n        eventListenersRef.current.set(event, []);\r\n      }\r\n      eventListenersRef.current.get(event).push(callback);\r\n    }\r\n  };\r\n\r\n  // Remove listener\r\n  const off = (event, callback) => {\r\n    if (socketRef.current) {\r\n      socketRef.current.off(event, callback);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    isConnected,\r\n    notifications,\r\n    addNotification,\r\n    removeNotification,\r\n    emit,\r\n    on,\r\n    off\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}