{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { useSocket } from './useSocket.js';\nexport const useAnnouncements = () => {\n  _s();\n  const [announcements, setAnnouncements] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    socket,\n    isConnected\n  } = useSocket();\n  const hasFetched = useRef(false);\n  const API_BASE_URL = 'http://localhost:3001/api';\n  const fetchAnnouncements = async () => {\n    // Prevent multiple simultaneous fetches\n    if (hasFetched.current) return;\n    try {\n      setLoading(true);\n      hasFetched.current = true;\n      console.log('ðŸ“¡ Fetching announcements...');\n      const response = await fetch(`${API_BASE_URL}/announcements`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success) {\n        console.log('âœ… Announcements loaded:', result.data.length);\n        setAnnouncements(result.data);\n      } else {\n        throw new Error(result.message || 'Failed to load announcements');\n      }\n    } catch (error) {\n      console.error('Error fetching announcements:', error);\n      setError(error.message);\n      hasFetched.current = false; // Allow retry on error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch data only once on mount\n  useEffect(() => {\n    if (!hasFetched.current) {\n      fetchAnnouncements();\n    }\n  }, []);\n\n  // Set up socket listeners only once when socket is available\n  useEffect(() => {\n    if (!socket || !isConnected) return;\n    console.log('ðŸ”Œ Setting up announcement listeners...');\n    const handleNewAnnouncement = newAnnouncement => {\n      console.log('ðŸ“¢ New announcement received:', newAnnouncement);\n      setAnnouncements(prev => [newAnnouncement, ...prev]);\n    };\n    const handleUpdatedAnnouncement = updatedAnnouncement => {\n      console.log('ðŸ“¢ Announcement updated:', updatedAnnouncement);\n      setAnnouncements(prev => prev.map(ann => ann._id === updatedAnnouncement._id ? updatedAnnouncement : ann));\n    };\n    const handleDeletedAnnouncement = data => {\n      console.log('ðŸ“¢ Announcement deleted:', data.id);\n      setAnnouncements(prev => prev.filter(ann => ann._id !== data.id));\n    };\n    socket.on('announcement_created', handleNewAnnouncement);\n    socket.on('announcement_updated', handleUpdatedAnnouncement);\n    socket.on('announcement_deleted', handleDeletedAnnouncement);\n    return () => {\n      if (socket) {\n        socket.off('announcement_created', handleNewAnnouncement);\n        socket.off('announcement_updated', handleUpdatedAnnouncement);\n        socket.off('announcement_deleted', handleDeletedAnnouncement);\n      }\n    };\n  }, [socket, isConnected]);\n  const refetch = () => {\n    hasFetched.current = false;\n    fetchAnnouncements();\n  };\n  return {\n    announcements,\n    loading,\n    error,\n    fetchAnnouncements: refetch,\n    isConnected\n  };\n};\n_s(useAnnouncements, \"oOmj4fThcQ0Ngm9CAv36xeYLTR8=\", false, function () {\n  return [useSocket];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useSocket","useAnnouncements","_s","announcements","setAnnouncements","loading","setLoading","error","setError","socket","isConnected","hasFetched","API_BASE_URL","fetchAnnouncements","current","console","log","response","fetch","ok","Error","status","result","json","success","data","length","message","handleNewAnnouncement","newAnnouncement","prev","handleUpdatedAnnouncement","updatedAnnouncement","map","ann","_id","handleDeletedAnnouncement","id","filter","on","off","refetch"],"sources":["C:/jbmmsi/client/src/hooks/useAnnouncements.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { useSocket } from './useSocket.js';\r\n\r\nexport const useAnnouncements = () => {\r\n  const [announcements, setAnnouncements] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const { socket, isConnected } = useSocket();\r\n  const hasFetched = useRef(false);\r\n\r\n  const API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n  const fetchAnnouncements = async () => {\r\n    // Prevent multiple simultaneous fetches\r\n    if (hasFetched.current) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      hasFetched.current = true;\r\n      \r\n      console.log('ðŸ“¡ Fetching announcements...');\r\n      const response = await fetch(`${API_BASE_URL}/announcements`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        console.log('âœ… Announcements loaded:', result.data.length);\r\n        setAnnouncements(result.data);\r\n      } else {\r\n        throw new Error(result.message || 'Failed to load announcements');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching announcements:', error);\r\n      setError(error.message);\r\n      hasFetched.current = false; // Allow retry on error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch data only once on mount\r\n  useEffect(() => {\r\n    if (!hasFetched.current) {\r\n      fetchAnnouncements();\r\n    }\r\n  }, []);\r\n\r\n  // Set up socket listeners only once when socket is available\r\n  useEffect(() => {\r\n    if (!socket || !isConnected) return;\r\n\r\n    console.log('ðŸ”Œ Setting up announcement listeners...');\r\n\r\n    const handleNewAnnouncement = (newAnnouncement) => {\r\n      console.log('ðŸ“¢ New announcement received:', newAnnouncement);\r\n      setAnnouncements(prev => [newAnnouncement, ...prev]);\r\n    };\r\n\r\n    const handleUpdatedAnnouncement = (updatedAnnouncement) => {\r\n      console.log('ðŸ“¢ Announcement updated:', updatedAnnouncement);\r\n      setAnnouncements(prev => \r\n        prev.map(ann => \r\n          ann._id === updatedAnnouncement._id ? updatedAnnouncement : ann\r\n        )\r\n      );\r\n    };\r\n\r\n    const handleDeletedAnnouncement = (data) => {\r\n      console.log('ðŸ“¢ Announcement deleted:', data.id);\r\n      setAnnouncements(prev => \r\n        prev.filter(ann => ann._id !== data.id)\r\n      );\r\n    };\r\n\r\n    socket.on('announcement_created', handleNewAnnouncement);\r\n    socket.on('announcement_updated', handleUpdatedAnnouncement);\r\n    socket.on('announcement_deleted', handleDeletedAnnouncement);\r\n\r\n    return () => {\r\n      if (socket) {\r\n        socket.off('announcement_created', handleNewAnnouncement);\r\n        socket.off('announcement_updated', handleUpdatedAnnouncement);\r\n        socket.off('announcement_deleted', handleDeletedAnnouncement);\r\n      }\r\n    };\r\n  }, [socket, isConnected]);\r\n\r\n  const refetch = () => {\r\n    hasFetched.current = false;\r\n    fetchAnnouncements();\r\n  };\r\n\r\n  return {\r\n    announcements,\r\n    loading,\r\n    error,\r\n    fetchAnnouncements: refetch,\r\n    isConnected\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEY,MAAM;IAAEC;EAAY,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC3C,MAAMW,UAAU,GAAGZ,MAAM,CAAC,KAAK,CAAC;EAEhC,MAAMa,YAAY,GAAG,2BAA2B;EAEhD,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC;IACA,IAAIF,UAAU,CAACG,OAAO,EAAE;IAExB,IAAI;MACFR,UAAU,CAAC,IAAI,CAAC;MAChBK,UAAU,CAACG,OAAO,GAAG,IAAI;MAEzBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,gBAAgB,CAAC;MAE7D,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAEpC,IAAID,MAAM,CAACE,OAAO,EAAE;QAClBT,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,MAAM,CAACG,IAAI,CAACC,MAAM,CAAC;QAC1DtB,gBAAgB,CAACkB,MAAM,CAACG,IAAI,CAAC;MAC/B,CAAC,MAAM;QACL,MAAM,IAAIL,KAAK,CAACE,MAAM,CAACK,OAAO,IAAI,8BAA8B,CAAC;MACnE;IACF,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdQ,OAAO,CAACR,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDC,QAAQ,CAACD,KAAK,CAACoB,OAAO,CAAC;MACvBhB,UAAU,CAACG,OAAO,GAAG,KAAK,CAAC,CAAC;IAC9B,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACAR,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,UAAU,CAACG,OAAO,EAAE;MACvBD,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAf,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,MAAM,IAAI,CAACC,WAAW,EAAE;IAE7BK,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IAEtD,MAAMY,qBAAqB,GAAIC,eAAe,IAAK;MACjDd,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEa,eAAe,CAAC;MAC7DzB,gBAAgB,CAAC0B,IAAI,IAAI,CAACD,eAAe,EAAE,GAAGC,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,MAAMC,yBAAyB,GAAIC,mBAAmB,IAAK;MACzDjB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEgB,mBAAmB,CAAC;MAC5D5B,gBAAgB,CAAC0B,IAAI,IACnBA,IAAI,CAACG,GAAG,CAACC,GAAG,IACVA,GAAG,CAACC,GAAG,KAAKH,mBAAmB,CAACG,GAAG,GAAGH,mBAAmB,GAAGE,GAC9D,CACF,CAAC;IACH,CAAC;IAED,MAAME,yBAAyB,GAAIX,IAAI,IAAK;MAC1CV,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAES,IAAI,CAACY,EAAE,CAAC;MAChDjC,gBAAgB,CAAC0B,IAAI,IACnBA,IAAI,CAACQ,MAAM,CAACJ,GAAG,IAAIA,GAAG,CAACC,GAAG,KAAKV,IAAI,CAACY,EAAE,CACxC,CAAC;IACH,CAAC;IAED5B,MAAM,CAAC8B,EAAE,CAAC,sBAAsB,EAAEX,qBAAqB,CAAC;IACxDnB,MAAM,CAAC8B,EAAE,CAAC,sBAAsB,EAAER,yBAAyB,CAAC;IAC5DtB,MAAM,CAAC8B,EAAE,CAAC,sBAAsB,EAAEH,yBAAyB,CAAC;IAE5D,OAAO,MAAM;MACX,IAAI3B,MAAM,EAAE;QACVA,MAAM,CAAC+B,GAAG,CAAC,sBAAsB,EAAEZ,qBAAqB,CAAC;QACzDnB,MAAM,CAAC+B,GAAG,CAAC,sBAAsB,EAAET,yBAAyB,CAAC;QAC7DtB,MAAM,CAAC+B,GAAG,CAAC,sBAAsB,EAAEJ,yBAAyB,CAAC;MAC/D;IACF,CAAC;EACH,CAAC,EAAE,CAAC3B,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,MAAM+B,OAAO,GAAGA,CAAA,KAAM;IACpB9B,UAAU,CAACG,OAAO,GAAG,KAAK;IAC1BD,kBAAkB,CAAC,CAAC;EACtB,CAAC;EAED,OAAO;IACLV,aAAa;IACbE,OAAO;IACPE,KAAK;IACLM,kBAAkB,EAAE4B,OAAO;IAC3B/B;EACF,CAAC;AACH,CAAC;AAACR,EAAA,CApGWD,gBAAgB;EAAA,QAIKD,SAAS;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}